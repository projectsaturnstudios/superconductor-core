---
description: Guidelines for continuously improving Cursor rules based on emerging code patterns and best practices.
globs: **/*
alwaysApply: true
---
- **Rule Improvement Triggers:**
  - New code patterns not covered by existing rules
  - Repeated similar implementations across files
  - Common error patterns that could be prevented
  - New libraries or tools being used consistently
  - Emerging best practices in the codebase

- **Analysis Process:**
  - Compare new code with existing rules
  - Identify patterns that should be standardized
  - Look for references to external documentation
  - Check for consistent error handling patterns
  - Monitor test patterns and coverage
  - Periodically review insights from adapted external prompts (e.g., our version of the Devin prompt located in `.ai-agent/prompts/Devin AI/Prompt.txt`) to identify principles that could enhance existing rules or suggest new ones.

- **Rule Updates:**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by a rule
    - Code reviews repeatedly mention the same feedback
    - New security or performance patterns emerge

  - **Modify Existing Rules When:**
    - Better examples exist in the codebase
    - Additional edge cases are discovered
    - Related rules have been updated
    - Implementation details have changed

- **Example Pattern Recognition:**
  ```typescript
  // If you see repeated patterns like:
  const data = await prisma.user.findMany({
    select: { id: true, email: true },
    where: { status: 'ACTIVE' }
  });
  
  // Consider adding to [prisma.mdc](mdc:.cursor/rules/prisma.mdc):
  // - Standard select fields
  // - Common where conditions
  // - Performance optimization patterns
  ```

- **Rule Quality Checks:**
  - Rules should be actionable and specific
  - **Explain the Rationale**: Each rule should briefly state its purpose or the problem it solves.
  - Examples should come from actual code or be fully runnable/verifiable.
    - If showing a "before/after", clearly highlight what changed.
  - References should be up to date
  - Patterns should be consistently enforced

- **Continuous Improvement:**
  - Monitor code review comments
  - Track common development questions
  - Update rules after major refactors
  - Add links to relevant documentation
  - Cross-reference related rules

- **Rule Deprecation:**
  - Mark outdated patterns as deprecated
  - Remove rules that no longer apply
  - Update references to deprecated rules
  - Document migration paths for old patterns

- **Documentation Updates:**
  - Keep examples synchronized with code
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes

  - **Memory Persistence & Quality:**
    - **Purposeful Recall**: To maintain context, always store useful information with the `mcp_Memories_add_memories` tool. This includes not just *what* was done, but *why* specific decisions were made, *what was learned* from challenges, and any new effective patterns or anti-patterns observed. Refer to these memories to inform future actions and rule improvement suggestions.
    - **Structured Creation**: When creating memories, aim for clarity and searchability:
      - Use descriptive titles that summarize the memory's core content.
      - Structure the content logically.
      - Consider using consistent tags (e.g., `decision`, `learning`, `pattern`, `tool_insight`, `project_X`) to categorize memories for easier retrieval. While the `mcp_Memories_add_memories` tool doesn't have a dedicated tags parameter, you can prepend them to the memory content or title.
    - **Proactive Use**: Use the memories tool often to understand what you are doing, especially for multi-step tasks or evolving solutions.
    - **Collaborative Refinement**: When in doubt about what to remember or how to structure it, ask me questions. We can refine our memory strategy together.

Follow [cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc) for proper rule formatting and structure.