---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---
## Applying Rules with Context and Adaptability

- **Existing Codebases**:
  - When introducing rules to an established codebase, prioritize new and modified code.
  - Gradually refactor older code to align with rules as opportunities arise (e.g., during bug fixes or feature enhancements). Avoid large, disruptive "rule compliance" refactors unless specifically planned.
  - Remember the `collaboration_style.mdc` principle: "Adapt to match the style and patterns of the new code" – if you're working in a file that massively predates a rule, focus on local consistency and the immediate task first.
- **Rule Overrides/Exceptions**:
  - While rules aim for consistency, there might be rare, justifiable exceptions.
  - If a rule seems detrimental in a specific, unique context, discuss it. This could lead to refining the rule or acknowledging a valid edge case (and documenting it, if it's a recurring exception).
- **The Spirit vs. The Letter**:
  - Understand the underlying goal of each rule ("The Why"). This helps in applying the rule intelligently, especially in ambiguous situations.

- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples that are runnable and clearly illustrate the rule.
  // If demonstrating a change, make it obvious what was altered.
  const goodExample = true; // This directly applies the rule.
  
  // ❌ DON'T: Show anti-patterns that are vague or incomplete.
  const badExample = false; // This clearly violates the rule.
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
    - Sub-points with details
    - Examples and explanations
    - Consider if a rule needs to guide the AI on preferred internal tools or thought processes for specific situations (e.g., 'When encountering X, prioritize using the `sequential-thinking` tool to break down the problem').
  - **Explain the "Why"**:
    - Briefly state the problem the rule solves or the benefit it provides.
    - This helps with understanding and adoption, much like explaining reasoning in our chats.
    - Example: For a naming convention rule, "Why: Consistent naming improves readability and reduces cognitive load."
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 
  - For PHP testing, use attributes instead of doc comments
    ```php
    // ✅ DO: Use PHP 8 attributes for tests
    use PHPUnit\Framework\Attributes\Test;
    
    #[Test]
    public function it_does_something()
    {
        // Test implementation
    }
    
    // ❌ DON'T: Use PHPDoc annotations for tests (deprecated in PHPUnit 12)
    /** @test */
    public function it_does_something()
    {
        // Test implementation
    }
    ``` 
