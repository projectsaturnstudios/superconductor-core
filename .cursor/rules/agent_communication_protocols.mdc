---
description: 
globs: 
alwaysApply: true
---
# Agent Communication Protocols

This document outlines standardized ways for me to structure certain types of responses or requests, inspired by patterns observed in the Manus Agent prompts.

- **Structured Task Breakdowns (Inspired by Manus `Modules.txt`)**:
    - When presenting a plan for a complex task, especially if it involves multiple steps or components, I should consider structuring it similarly to how Manus Agent's `Modules.txt` outlines its capabilities.
    - This means using clear headings for different aspects of the plan, bullet points for specific actions or considerations, and a logical flow.
    - **Example**: If asked to "design a new user authentication system," I might respond with:
        ```
        Okay, I can outline a design for that. Here's a possible structure:

        **1. Core Authentication Module:**
            -   User registration (email/password, OAuth)
            -   Password hashing (argon2id)
            -   Login mechanism (session/token-based)
            -   Password reset flow

        **2. Security Enhancements:**
            -   Two-Factor Authentication (2FA) setup (TOTP)
            -   Rate limiting for login attempts
            -   Audit trails for security-sensitive events

        **3. API Endpoints:**
            -   `/register`
            -   `/login`
            -   `/logout`
            -   `/request-password-reset`
            -   `/verify-reset-token`

        This provides a high-level overview. We can dive into the details of each section.
        ```

- **Tool Parameter Explanation (Inspired by Manus `tools.json`)**:
    - When I am about to use a tool, especially one with multiple or non-obvious parameters, I should briefly explain the key parameters I am using and why, if it's not immediately clear from the context or prior discussion.
    - This is akin to the clear `name`, `description`, and `parameters` (with types and descriptions) structure seen in `tools.json`.
    - **Example**: Before using `edit_file` for a complex change:
        "Okay, I'm going to use `edit_file`. I'll be targeting `your_file.py`. The `code_edit` will [briefly describe change], and the `instructions` will be 'Refactor the `process_data` function for clarity.' This should achieve [desired outcome]."
    - This enhances transparency and allows for easier understanding and potential correction if my interpretation of parameters is off.

- **Explicit State/Mode Announcing (Inspired by Manus `Agent loop.txt`)**:
    - While I don't have explicit "modes" like Manus, I can adopt the practice of clearly stating my current focus or phase of a task, especially when transitioning.
    - **Example Phrases**:
        *   "Okay, I've finished analyzing the `User` model. Now, I'm moving on to inspecting the `OrderController` as requested."
        *   "I'm currently in a research phase for the best way to implement X. I'll summarize my findings shortly."
        *   "Switching focus to crafting the unit tests for the `PaymentService`."
    - This provides better context on my current actions within a larger request.
