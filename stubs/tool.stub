<?php

namespace {{ namespace }};

use Superconductor\Capabilities\Tools\BaseTool;
use Superconductor\Schema\Definitions\V20241105\Tools\CallToolRequest as V20241105CallToolRequest;
use Superconductor\Schema\Definitions\V20250326\Tools\CallToolRequest as V20250326CallToolRequest;
use Superconductor\Support\Attributes\ToolCall;

#[ToolCall(
    tool: '{{ tool_name }}',
    description: '{{ description }}',
    inputSchema: [
        'type' => 'object',
        'properties' => [
            'input' => [
                'type' => 'string',
                'description' => 'Input parameter for the tool'
            ]
        ],
        'required' => ['input']
    ]
)]
class {{ class }} extends BaseTool
{
    /**
     * Handle the incoming tool call request
     *
     * @param V20241105CallToolRequest|V20250326CallToolRequest $incoming_message
     * @return array
     */
    public function handle(V20241105CallToolRequest|V20250326CallToolRequest $incoming_message): array
    {
        $results = [
            'content' => [],
            'isError' => false
        ];

        try {
            if ($content = $this->execute(...$incoming_message->params['arguments'])) {
                $text_content_class = $incoming_message::getTextContextObj();
                $text_content = new $text_content_class($content);
                $results['content'][] = $text_content->toValue();
            }
        } catch (\Exception $e) {
            $results['isError'] = true;
            $error_content_class = $incoming_message::getTextContextObj();
            $error_content = new $error_content_class('Error: ' . $e->getMessage());
            $results['content'][] = $error_content->toValue();
        }

        return $results;
    }

    /**
     * Execute the tool's main logic
     *
     * @param string $input The input parameter
     * @return string
     */
    private function execute(string $input): string
    {
        // TODO: Implement your tool logic here
        return "Processed: " . $input;
    }
} 